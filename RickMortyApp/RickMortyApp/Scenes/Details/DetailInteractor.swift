//
//  DetailInteractor.swift
//  RickMortyApp
//
//  Created by Nevilkumar Lad on 06/01/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailBusinessLogic {
    func doDetailDetails(request: DetailModel.FetchDetails.Request)
    func fetchDetails(request: DetailModel.FetchDetails.Request)
    func initialise(showLoader: Bool)
}

protocol DetailDataStore {
    var screenTitle: String? { get set }
    var detailType: DetailType { get set }
    var character: Character? { get set }
    var episode: Episode? { get set }
    var locationDetails: LocationDetails? { get set }
}

class DetailInteractor: DetailBusinessLogic, DetailDataStore {

    var screenTitle: String?
    var detailType: DetailType = .characters
    var character: Character?
    var episode: Episode?
    var locationDetails: LocationDetails?


    var presenter: DetailPresentationLogic?
    var worker: DetailWorker?
    //var name: String = ""

    // MARK: Do DetailDetails

    func doDetailDetails(request: DetailModel.FetchDetails.Request) {
        worker = DetailWorker()
        worker?.doSomeWork()


    }

    func fetchDetails(request: DetailModel.FetchDetails.Request) {

        var response = DetailModel.FetchDetails.Response()
        switch detailType {
        case .characters:
            response.character = self.character
        case .episodes:
            response.episode = self.episode
        case .locations:
            response.locationDetails = self.locationDetails
        }

        presenter?.presentDetails(response: response)
    }

    func initialise(showLoader: Bool = true) {
    }
}
