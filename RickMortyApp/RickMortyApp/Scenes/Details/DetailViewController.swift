//
//  DetailViewController.swift
//  RickMortyApp
//
//  Created by Nevilkumar Lad on 06/01/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DetailDisplayLogic: class {
    func displayDetails(viewModel: DetailModel.FetchDetails.ViewModel)
    func displayNextScene(viewModel: DetailModel.NextScene.ViewModel)
    func displayLoader(type: DetailLoaderType)
    func hideLoader(type: DetailLoaderType)
    func displayError(type: DetailErrorType)
}

class DetailViewController: BaseViewController, DetailDisplayLogic {
    var interactor: DetailBusinessLogic?
    var router: (NSObjectProtocol & DetailRoutingLogic & DetailDataPassing)?
    var viewModel = DetailModel.FetchDetails.ViewModel(displayedSections: [])
    class func instantiateFromStoryboard() ->  DetailViewController {
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        return storyboard.instantiateViewController(withIdentifier: String(describing: self)) as!  DetailViewController
    }

    // MARK: - Outlets
    @IBOutlet weak var tvDetails: UITableView!

    // MARK: Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: Setup

    private func setup() {
        let viewController = self
        let interactor = DetailInteractor()
        let presenter = DetailPresenter()
        let router = DetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: Routing

    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }

    // MARK: View lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        interactor?.initialise(showLoader: true)
        registerCustomTableViewCell()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.fetchDetails(request: DetailModel.FetchDetails.Request())
    }

    func registerCustomTableViewCell() {
        tvDetails.delegate = self
        tvDetails.dataSource = self
        tvDetails.separatorStyle = .none
        tvDetails.register(UINib(nibName: CUSTOM_TABLEVIEW_CELL_ID, bundle: Bundle.init(for: CustomTableViewCell.self)), forCellReuseIdentifier: CUSTOM_TABLEVIEW_CELL_ID)
        tvDetails.backgroundColor = Color.lightBackground.value
        tvDetails.rowHeight = UITableView.automaticDimension
        tvDetails.estimatedRowHeight = 300
        tvDetails.keyboardDismissMode = .onDrag
        tvDetails.contentInset = UIEdgeInsets(top: 8.0, left: 0, bottom: 0, right: 0)
    }

    // MARK: Do DetailDetails

    //@IBOutlet weak var nameTextField: UITextField!

    func doDetailDetails() {
        let request = DetailModel.FetchDetails.Request()
        interactor?.doDetailDetails(request: request)
    }

    func displayDetails(viewModel: DetailModel.FetchDetails.ViewModel) {
        self.viewModel = viewModel
    }

    func displayNextScene(viewModel: DetailModel.NextScene.ViewModel) {
        
    }

    func displayLoader(type: DetailLoaderType) {
        DispatchQueue.main.async {
            switch type {
            case .general: super.showIndicator("please wait...")
            }
        }
    }

    func hideLoader(type: DetailLoaderType) {
        super.hideIndicator()
    }

    func displayError(type: DetailErrorType) {

    }
}


extension DetailViewController: UITableViewDelegate, UITableViewDataSource {

    func numberOfSections(in tableView: UITableView) -> Int {
        return self.viewModel.displayedSections.count
    }
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return self.viewModel.displayedSections[section].displayedListItem.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {

        let sectionData = viewModel.displayedSections[indexPath.section]
        let itemData = sectionData.displayedListItem[indexPath.row]

        guard let cell = tableView.dequeueReusableCell(withIdentifier: CUSTOM_TABLEVIEW_CELL_ID) as? CustomTableViewCell else {
            return UITableViewCell()
        }

        cell.lblTitle.text = itemData.title
        cell.lblSubtitle.text = itemData.subTitle
        cell.ivDisclosure.isHidden = !itemData.showDetail
        cell.lblInfo.text = itemData.info
        cell.lblInfo.isHidden = itemData.info == nil //|| itemData.info?.isEmpty()
        if let imageURL = itemData.imageURL {
            cell.ivIcon.isHidden = false
            cell.ivIcon.downloadImageFrom(link: imageURL, contentMode: .scaleAspectFill)
        } else {
            cell.ivIcon.isHidden = true
        }

        return cell

    }

    func tableView(_ tableView: UITableView, titleForHeaderInSection section: Int) -> String? {
        return self.viewModel.displayedSections[section].sectionTitle
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        /*let itemData = displayedItems[indexPath.row]
        if !itemData.isLoadingCell {
            router?.routeToNext(showDetail: itemData.showDetail, index: indexPath.row)
        }*/
    }


}
