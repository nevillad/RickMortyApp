//
//  ListViewPresenter.swift
//  RickMortyApp
//
//  Created by Nevilkumar Lad on 06/01/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol ListPresentationLogic {
    func presentFetchFromLocalDataStore(with response: ListModels.FetchFromLocalDataStore.Response)
    func presentFetchFromRemoteDataStore(with response: ListModels.FetchFromRemoteDataStore.Response)
    func presentLoader(type: ListLoaderType)
    func hideLoader(type: ListLoaderType)
    func presentError(type: ListErrorType)
}

class ListPresenter: ListPresentationLogic {

    // MARK: - Properties

    typealias Models = ListModels
    weak var viewController: ListDisplayLogic?

    // MARK: - Use Case - Fetch From Local DataStore

    func presentFetchFromLocalDataStore(with response: ListModels.FetchFromLocalDataStore.Response) {
        let translation = "Some localized text."
        let viewModel = Models.FetchFromLocalDataStore.ViewModel(exampleTranslation: translation)
        viewController?.displayFetchFromLocalDataStore(with: viewModel)
    }

    // MARK: - Use Case - Fetch From Remote DataStore

    func presentFetchFromRemoteDataStore(with response: ListModels.FetchFromRemoteDataStore.Response) {
        var displayedItems: [ListModels.FetchFromRemoteDataStore.ViewModel.DisplayedListItem] = []

        if let characters = response.characters {
            for character in characters {
                var countString = ""
                let count = character.episode.count
                countString = "\(count) episode\(count > 1 ? "'s" : "")"

                if let name = character.name {
                    let item = ListModels.FetchFromRemoteDataStore.ViewModel.DisplayedListItem(title: name, subTitle: countString,imageURL: character.image, showDetail: true)
                    displayedItems.append(item)
                }
            }
        } else if let episodes = response.episodes {
            for episode in episodes {
                var name = ""
                if let nameValue = episode.name {
                    name = "\(nameValue)"
                }
                if let content = episode.episode {
                    let item = ListModels.FetchFromRemoteDataStore.ViewModel.DisplayedListItem(title: name, subTitle: content, info: episode.airDate ,showDetail: true)
                    displayedItems.append(item)
                }
            }
        } else if let locations = response.locations {
            for location in locations {
                var countString = ""
                if let count = location.residents?.count {
                    countString = "\(count) resident\(count > 1 ? "'s" : "")"
                }

                if let name = location.name {
                    let item = ListModels.FetchFromRemoteDataStore.ViewModel.DisplayedListItem(title: name.capitalized, subTitle: countString, info: location.dimension,  showDetail: true)
                    displayedItems.append(item)
                }
            }
        }

        if response.didAllowToFetchNextData {
            let item = ListModels.FetchFromRemoteDataStore.ViewModel.DisplayedListItem(title: "Loading more. Please wait...", subTitle: "", showDetail: false, isLoadingCell: true)
            displayedItems.append(item)
        }

        let viewModel = Models.FetchFromRemoteDataStore.ViewModel(displayedListItem: displayedItems, didAllowToFetchNextData: response.didAllowToFetchNextData)
        viewController?.displayFetchFromRemoteDataStore(with: viewModel)
    }

    func presentLoader(type: ListLoaderType) {

        viewController?.displayLoader(type: type)
    }

    func hideLoader(type: ListLoaderType) {

        viewController?.hideLoader(type: type)
    }

    func presentError(type: ListErrorType ) {

        viewController?.displayError(type: type)
    }
}

