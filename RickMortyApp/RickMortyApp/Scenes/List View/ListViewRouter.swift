//
//  ListViewRouter.swift
//  RickMortyApp
//
//  Created by Nevilkumar Lad on 06/01/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit



protocol ListRoutingLogic {
    func routeToNext(showDetail: Bool, index: Int)
}

protocol ListDataPassing {
    var dataStore: ListDataStore? { get }
}

class ListRouter: NSObject, ListRoutingLogic, ListDataPassing {

    // MARK: - Properties
    weak var viewController: ListViewController?
    var dataStore: ListDataStore?

    // MARK: - Routing
    func routeToNext(showDetail: Bool, index: Int) {
        self.dataStore?.selectdIndex = index
        showDetailView() 
    }

    func showDetailView() {
        let detailViewController = DetailViewController.instantiateFromStoryboard()
        var destinationDS = detailViewController.router?.dataStore
        self.passDataTo(&destinationDS!, from: self.dataStore!)
        viewController?.navigationController?.pushViewController(detailViewController, animated: true)
    }


    // MARK: - Passing Data
     func passDataTo(_ destinationDS: inout DetailDataStore, from sourceDS: ListDataStore) {

        let index = sourceDS.selectdIndex
        var title = ""
        switch sourceDS.listScreenType {
        case .characters:
            title = "Character"
            destinationDS.detailType = .characters
            if let characters = sourceDS.characters, characters.count > index {
                destinationDS.character = characters[index]
                title = characters[index].name ?? "Character"
            }

        case .episodes:
            title = "Episode"
            destinationDS.detailType = .episodes
            if let episodes = sourceDS.episodes, episodes.count > index {
                destinationDS.episode = episodes[index]
                title = episodes[index].name ?? "Episode"
            }

        case .locations:
            title = "Location"
            destinationDS.detailType = .locations
            if let locations = sourceDS.locations, locations.count > index {
                destinationDS.locationDetails = locations[index]
                title = locations[index].name ?? "Location"
            }
        }
        destinationDS.screenTitle = title
     }
}
