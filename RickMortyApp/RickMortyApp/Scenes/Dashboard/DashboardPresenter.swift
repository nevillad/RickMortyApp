//
//  DashboardPresenter.swift
//  RickMortyApp
//
//  Created by Nevilkumar Lad on 05/01/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DashboardPresentationLogic {
    func presentFetchFromLocalDataStore(with response: DashboardModels.FetchFromLocalDataStore.Response)
    func presentFetchFromRemoteDataStore(with response: DashboardModels.FetchFromRemoteDataStore.Response)
    func presentLoader(type: DashboardLoaderType)
    func hideLoader(type: DashboardLoaderType)
    func presentError(type: DashboardErrorType)
}

class DashboardPresenter: DashboardPresentationLogic {

    // MARK: - Properties

    typealias Models = DashboardModels
    weak var viewController: DashboardDisplayLogic?

    // MARK: - Use Case - Fetch From Local DataStore

    func presentFetchFromLocalDataStore(with response: DashboardModels.FetchFromLocalDataStore.Response) {
        var actions: [DashboardModels.FetchFromLocalDataStore.ViewModel.DispalyedAction] = []

        for item in response.actionItems {
            let title = item["title"] ?? ""
            let icon = item["icon"] ?? ""
            if !title.isEmpty() && !icon.isEmpty() {
                var action: Actions = .none

                switch title {
                case CHARACTERS: action = .characters
                case EPISODES: action = .episodes
                case LOCATIONS: action = .locations
                default: action = .none
                }

                let model = DashboardModels.FetchFromLocalDataStore.ViewModel.DispalyedAction(action: action, title: title, icon: icon)
                actions.append(model)
            }
        }

        let viewModel = Models.FetchFromLocalDataStore.ViewModel(displayedActions: actions)
        viewController?.displayFetchFromLocalDataStore(with: viewModel)
    }

    // MARK: - Use Case - Fetch From Remote DataStore

    func presentFetchFromRemoteDataStore(with response: DashboardModels.FetchFromRemoteDataStore.Response) {
        let formattedExampleVariable = response.exampleVariable ?? ""
        let viewModel = Models.FetchFromRemoteDataStore.ViewModel(exampleVariable: formattedExampleVariable)
        viewController?.displayFetchFromRemoteDataStore(with: viewModel)
    }

    func presentLoader(type: DashboardLoaderType) {

        viewController?.displayLoader(type: type)
    }

    func hideLoader(type: DashboardLoaderType) {

        viewController?.hideLoader(type: type)
    }

    func presentError(type: DashboardErrorType ) {

        viewController?.displayError(type: type)
    }
}
