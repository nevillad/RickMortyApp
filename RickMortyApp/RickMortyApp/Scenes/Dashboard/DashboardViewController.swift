//
//  DashboardViewController.swift
//  RickMortyApp
//
//  Created by Nevilkumar Lad on 05/01/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

import UIKit
import FLEX

protocol DashboardDisplayLogic: class {
    func displayFetchFromLocalDataStore(with viewModel: DashboardModels.FetchFromLocalDataStore.ViewModel)
    func displayFetchFromRemoteDataStore(with viewModel: DashboardModels.FetchFromRemoteDataStore.ViewModel)
    func displayLoader(type: DashboardLoaderType)
    func hideLoader(type: DashboardLoaderType)
    func displayError(type: DashboardErrorType)
}

class DashboardViewController: BaseViewController, DashboardDisplayLogic {

    // MARK: - Properties

    typealias Models = DashboardModels
    var router: (NSObjectProtocol & DashboardRoutingLogic & DashboardDataPassing)?
    var interactor: DashboardBusinessLogic?

    class func instantiateFromStoryboard() -> DashboardViewController {
        let storyboard = UIStoryboard(name: "Main", bundle: nil)
        return storyboard.instantiateViewController(withIdentifier: String(describing: self)) as! DashboardViewController
    }

    // MARK: - Outlets
    @IBOutlet weak var tvActions: UITableView!

    // MARK: - Object lifecycle

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }

    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }

    // MARK: - Setup

    private func setup() {
        let viewController = self
        let interactor = DashboardInteractor()
        let presenter = DashboardPresenter()
        let router = DashboardRouter()

        viewController.router = router
        viewController.interactor = interactor
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }

    // MARK: - View Lifecycle

    override func viewDidLoad() {
        super.viewDidLoad()
        registerCustomTableViewCell()
        setupFetchFromLocalDataStore()
        FLEXManager.shared.showExplorer()
    }

    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        setupFetchFromRemoteDataStore()
        //Remove left bar button as it a root view controller
        self.navigationItem.leftBarButtonItem = nil
    }

    override func viewDidAppear(_ animated: Bool) {
        super.viewDidAppear(animated)
    }

    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
    }

    // MARK: - TableView Cells

    func registerCustomTableViewCell() {
        tvActions.delegate = self
        tvActions.dataSource = self
        tvActions.separatorStyle = .none
        tvActions.register(UINib(nibName: DASHBOARD_TABLEVIEW_CELL_ID, bundle: Bundle.init(for: DashboardTableViewCell.self)), forCellReuseIdentifier: DASHBOARD_TABLEVIEW_CELL_ID)
        tvActions.backgroundColor = Color.lightBackground.value
        tvActions.rowHeight = UITableView.automaticDimension
        tvActions.estimatedRowHeight = 100
        tvActions.keyboardDismissMode = .onDrag
        tvActions.contentInset = UIEdgeInsets(top: 8.0, left: 0, bottom: 0, right: 0)
    }

    // MARK: - Use Case - Fetch From Local DataStore
    var displayedActions: [DashboardModels.FetchFromLocalDataStore.ViewModel.DispalyedAction] = []

    func setupFetchFromLocalDataStore() {
        let request = Models.FetchFromLocalDataStore.Request()
        interactor?.fetchFromLocalDataStore(with: request)
    }

    func displayFetchFromLocalDataStore(with viewModel: DashboardModels.FetchFromLocalDataStore.ViewModel) {
        displayedActions = viewModel.displayedActions
    }

    // MARK: - Use Case - Fetch From Remote DataStore

    @IBOutlet var exampleRemoteLabel: UILabel! = UILabel()
    func setupFetchFromRemoteDataStore() {
        let request = Models.FetchFromRemoteDataStore.Request()
        interactor?.fetchFromRemoteDataStore(with: request)
    }

    func displayFetchFromRemoteDataStore(with viewModel: DashboardModels.FetchFromRemoteDataStore.ViewModel) {
        exampleRemoteLabel.text = viewModel.exampleVariable
    }

    func displayLoader(type: DashboardLoaderType) {
        super.showIndicator("")
    }

    func hideLoader(type: DashboardLoaderType) {
        super.hideIndicator()
    }

    func displayError(type: DashboardErrorType) {
        switch type {
        case .backend:
            return
        default:
            return
        }
    }
}

extension DashboardViewController: UITableViewDelegate, UITableViewDataSource {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return displayedActions.count
    }

    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: DASHBOARD_TABLEVIEW_CELL_ID) as? DashboardTableViewCell else {
            return UITableViewCell()
        }
        let data = displayedActions[indexPath.row]
        cell.lblTitle.text = data.title
        cell.ivIcon.image = UIImage(named: data.icon)
        cell.lblSubtitle.isHidden = true
        return cell
    }

    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        let data = displayedActions[indexPath.row]
        router?.showNextScene(action: data.action)
    }

}
