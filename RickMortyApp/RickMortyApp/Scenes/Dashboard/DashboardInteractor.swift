//
//  DashboardInteractor.swift
//  RickMortyApp
//
//  Created by Nevilkumar Lad on 05/01/22.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol DashboardBusinessLogic {
    func fetchFromLocalDataStore(with request: DashboardModels.FetchFromLocalDataStore.Request)
    func fetchFromRemoteDataStore(with request: DashboardModels.FetchFromRemoteDataStore.Request)
}

protocol DashboardDataStore {
    var selectedAction: Actions? { get set }
}

class DashboardInteractor: DashboardBusinessLogic, DashboardDataStore {

    // MARK: - Properties
    typealias Models = DashboardModels

    lazy var worker = DashboardWorker()
    var presenter: DashboardPresentationLogic?

    // MARK: data store
    var selectedAction: Actions?

    let actionItems = [
        ["title": CHARACTERS, "icon": "person.crop.square.fill.and.at.rectangle"],
        ["title": EPISODES, "icon": "tv"],
        ["title": LOCATIONS, "icon": "map"]
    ]

    // MARK: - Use Case - Fetch From Local DataStore

    func fetchFromLocalDataStore(with request: DashboardModels.FetchFromLocalDataStore.Request) {
      let response = Models.FetchFromLocalDataStore.Response(actionItems: actionItems)
        presenter?.presentFetchFromLocalDataStore(with: response)
    }

    // MARK: - Use Case - Fetch From Remote DataStore

    func fetchFromRemoteDataStore(with request: DashboardModels.FetchFromRemoteDataStore.Request) {
        // fetch something from backend and return the values here
        // <#Network Worker Instance#>.fetchFromRemoteDataStore(completion: { [weak self] code in
        //     let response = Models.FetchFromRemoteDataStore.Response(exampleVariable: code)
        //     self?.presenter?.presentFetchFromRemoteDataStore(with: response)
        // })
    }

}
